<?php
// Prevent direct access to this file
if (!defined('ABSPATH')) {
    exit;
}

function aiseo_add_internal_links_to_all_posts() {
    global $wpdb;

    // Get all posts generated by our plugin, including drafts
    $posts = $wpdb->get_results("
        SELECT p.ID, p.post_title, p.post_content 
        FROM {$wpdb->posts} p
        JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
        WHERE pm.meta_key = '_aiseo_generated'
        AND p.post_status IN ('publish', 'draft')
    ");

    aiseo_log("Number of posts fetched for internal linking: " . count($posts));

    // Get all keywords and their associated post IDs
    $keyword_posts = $wpdb->get_results("
        SELECT post_id, meta_value as keyword
        FROM {$wpdb->postmeta}
        WHERE meta_key = '_aiseo_primary_keyword'
    ");
    $keyword_map = array_column($keyword_posts, 'post_id', 'keyword');

    aiseo_log("Number of keywords fetched: " . count($keyword_posts));

    foreach ($posts as $post) {
        $links_added = 0;
        $max_links = 5;
        $linked_keywords = array();

        // Get all keywords for this post
        $keywords = wp_get_object_terms($post->ID, 'aiseo_keyword', array('fields' => 'names'));
        aiseo_log("Post ID: {$post->ID} - Keywords: " . implode(', ', $keywords));

        $content = $post->post_content;

        foreach ($keywords as $keyword) {
            if ($links_added >= $max_links) break;
            if (in_array($keyword, $linked_keywords)) continue;

            // Skip if this is the primary keyword for the current post
            $primary_keyword = get_post_meta($post->ID, '_aiseo_primary_keyword', true);
            if ($primary_keyword === $keyword) {
                aiseo_log("Skipping primary keyword '{$keyword}' for post ID: {$post->ID}");
                continue;
            }

            // Find the post associated with this keyword
            $keyword_post_id = isset($keyword_map[$keyword]) ? $keyword_map[$keyword] : null;

            if ($keyword_post_id && $keyword_post_id != $post->ID) {
                $link_url = get_permalink($keyword_post_id);

                // Use preg_replace_callback to add the link
                $pattern = '/(?<!<a[^>]*>)(?<!<h[1-6]>)(' . preg_quote($keyword, '/') . ')(?![^<]*<\/a>)(?![^<]*<\/h[1-6]>)/i';
                $content = preg_replace_callback($pattern, function($matches) use ($link_url, &$links_added, &$linked_keywords, $keyword, $post) {
                    $links_added++;
                    $linked_keywords[] = $keyword;
                    aiseo_log("Added internal link for keyword '{$keyword}' in post ID: {$post->ID}");
                    return '<a href="' . esc_url($link_url) . '">' . $matches[1] . '</a>';
                }, $content, 1);
            } else {
                aiseo_log("No matching post found for keyword '{$keyword}' in post ID: {$post->ID}");
            }
        }

        if ($content !== $post->post_content && !empty($content)) {
            $post_data = array(
                'ID' => $post->ID,
                'post_content' => $content
            );
            
            wp_update_post($post_data);
            
            aiseo_log("Updated post ID: {$post->ID} with {$links_added} internal links");
            aiseo_log("Original content length: " . strlen($post->post_content));
            aiseo_log("Updated content length: " . strlen($content));
        } else {
            aiseo_log("No update performed for post ID: {$post->ID}. Content unchanged or empty.");
        }
    }

    aiseo_log("Completed processing " . count($posts) . " posts for internal linking");
}

function aiseo_add_internal_links_to_post($post_id) {
    global $wpdb;

    $post = get_post($post_id);
    if (!$post) {
        return array('status' => 'error', 'message' => 'Post not found.');
    }

    $links_added = 0;
    $max_links = 5; // Maximum number of links to add per post
    $linked_keywords = array(); // Track which keywords have been linked

    // Get all keywords and their associated post IDs
    $keyword_posts = $wpdb->get_results("
        SELECT post_id, meta_value as keyword
        FROM {$wpdb->postmeta}
        WHERE meta_key = '_aiseo_primary_keyword'
    ");
    $keyword_map = array_column($keyword_posts, 'post_id', 'keyword');

    // Get all keywords for this post
    $keywords = wp_get_object_terms($post_id, 'aiseo_keyword', array('fields' => 'names'));
    aiseo_log("Post ID: {$post_id} - Keywords: " . implode(', ', $keywords));

    $content = $post->post_content;

    foreach ($keywords as $keyword) {
        if ($links_added >= $max_links) break;
        if (in_array($keyword, $linked_keywords)) continue; // Skip if we've already linked this keyword

        // Skip if this is the primary keyword for the current post
        $primary_keyword = get_post_meta($post_id, '_aiseo_primary_keyword', true);
        if ($primary_keyword === $keyword) {
            aiseo_log("Skipping primary keyword '{$keyword}' for post ID: {$post_id}");
            continue;
        }

        // Find the post associated with this keyword
        $keyword_post_id = isset($keyword_map[$keyword]) ? $keyword_map[$keyword] : null;

        if ($keyword_post_id && $keyword_post_id != $post_id) {
            $link_url = get_permalink($keyword_post_id);

            // Use preg_replace_callback to add the link, ensuring we don't link within existing links or headings
            $pattern = '/(?<!<a[^>]*>)(?<!<h[1-6]>)(' . preg_quote($keyword, '/') . ')(?![^<]*<\/a>)(?![^<]*<\/h[1-6]>)/i';
            $content = preg_replace_callback($pattern, function($matches) use ($link_url, &$links_added, &$linked_keywords, $keyword, $post_id) {
                $links_added++;
                $linked_keywords[] = $keyword;
                aiseo_log("Added internal link for keyword '{$keyword}' in post ID: {$post_id}");
                return '<a href="' . esc_url($link_url) . '">' . $matches[1] . '</a>';
            }, $content, 1);
        } else {
            aiseo_log("No matching post found for keyword '{$keyword}' in post ID: {$post_id}");
        }
    }

    if ($content !== $post->post_content && !empty($content)) {
        $post_data = array(
            'ID' => $post_id,
            'post_content' => $content
        );
        
        wp_update_post($post_data);
        
        aiseo_log("Updated post ID: {$post_id} with {$links_added} internal links");
        aiseo_log("Original content length: " . strlen($post->post_content));
        aiseo_log("Updated content length: " . strlen($content));
        
        return array(
            'status' => 'success',
            'message' => "Added {$links_added} internal links to the post.",
            'content' => $content
        );
    } else {
        aiseo_log("No update performed for post ID: {$post_id}. Content unchanged or empty.");
        return array(
            'status' => 'info',
            'message' => 'No new internal links were added to the post.'
        );
    }
}